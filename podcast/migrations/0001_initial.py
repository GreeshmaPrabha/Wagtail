# Generated by Django 5.0.7 on 2024-10-11 11:05

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0093_uploadedfile'),
        ('wagtailimages', '0026_delete_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='PodcastIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('seo_type', models.CharField(blank=True, help_text='SEO Type', max_length=255)),
                ('seo_keywords', models.CharField(blank=True, help_text='Comma-separated keywords', max_length=255)),
                ('canonical_url', models.CharField(blank=True, help_text='Canonical URL for this page', max_length=255)),
                ('og_title', models.CharField(blank=True, help_text='Optional. Alternative text for the OG title.', max_length=255)),
                ('og_description', models.CharField(blank=True, help_text='Optional. Alternative text for the OG description.', max_length=255)),
                ('banner_heading', models.CharField(default='', help_text='Banner heading', max_length=250, verbose_name='Banner heading')),
                ('banner_subheading', models.CharField(blank=True, default='', help_text='Banner sub heading', max_length=250, null=True, verbose_name='Banner sub heading')),
                ('banner_description', wagtail.fields.RichTextField(blank=True, help_text='Banner description', verbose_name='Banner description')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('body', wagtail.fields.RichTextField(blank=True)),
                ('banner_header_image', models.ForeignKey(blank=True, help_text='Banner image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Podcast Index Page',
                'verbose_name_plural': 'Podcast Index Pages',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='PodcastPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('seo_type', models.CharField(blank=True, help_text='SEO Type', max_length=255)),
                ('seo_keywords', models.CharField(blank=True, help_text='Comma-separated keywords', max_length=255)),
                ('canonical_url', models.CharField(blank=True, help_text='Canonical URL for this page', max_length=255)),
                ('og_title', models.CharField(blank=True, help_text='Optional. Alternative text for the OG title.', max_length=255)),
                ('og_description', models.CharField(blank=True, help_text='Optional. Alternative text for the OG description.', max_length=255)),
                ('banner_heading', models.CharField(default='', help_text='Banner heading', max_length=250, verbose_name='Banner heading')),
                ('banner_subheading', models.CharField(blank=True, default='', help_text='Banner sub heading', max_length=250, null=True, verbose_name='Banner sub heading')),
                ('banner_description', wagtail.fields.RichTextField(blank=True, help_text='Banner description', verbose_name='Banner description')),
                ('view_count', models.PositiveIntegerField(default=0, editable=False)),
                ('heading', models.CharField(blank=True, max_length=250, null=True, verbose_name='Heading')),
                ('sub_heading', models.CharField(blank=True, max_length=250, null=True, verbose_name='Heading')),
                ('podcast_intro', wagtail.fields.StreamField([('podcast_block', wagtail.blocks.StructBlock([('video_source', wagtail.blocks.ChoiceBlock(choices=[('upload', 'Upload Video'), ('external', 'External Video Link')], help_text='Choose whether to upload a video or provide an external link.', label='Video Source')), ('uploaded_video', wagtail.documents.blocks.DocumentChooserBlock(help_text='Upload a video file (MP4, MOV, AVI, or WebM)', label='Upload Video', required=False)), ('external_video_link', wagtail.blocks.URLBlock(help_text='Paste the URL of an external video (e.g., YouTube, Vimeo)', label='External Video Link', required=False)), ('watch_time', wagtail.blocks.IntegerBlock(help_text='Estimated time to watch/read the content.', label='Watch Time (minutes)', required=True)), ('thumbnail', wagtail.images.blocks.ImageChooserBlock(help_text='Choose a thumbnail image for the video.', label='Thumbnail Image')), ('date', wagtail.blocks.CharBlock(help_text='Add date', required=False)), ('heading', wagtail.blocks.CharBlock(help_text='Add your heading', required=True)), ('description', wagtail.blocks.RichTextBlock(editor='default', help_text='Add additional text', required=False)), ('points', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('points', wagtail.blocks.CharBlock(help_text='Add your points', required=True))]), help_text='Add multiple points to this section', label='Add text card'))]))])),
                ('podcast', wagtail.fields.StreamField([('podcast_block', wagtail.blocks.StructBlock([('video', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(help_text='Add your heading', required=True)), ('video_source', wagtail.blocks.ChoiceBlock(choices=[('upload', 'Upload Video'), ('external', 'External Video Link')], help_text='Choose whether to upload a video or provide an external link.', label='Video Source')), ('uploaded_video', wagtail.documents.blocks.DocumentChooserBlock(help_text='Upload a video file (MP4, MOV, AVI, or WebM)', label='Upload Video', required=False)), ('external_video_link', wagtail.blocks.URLBlock(help_text='Paste the URL of an external video (e.g., YouTube, Vimeo)', label='External Video Link', required=False)), ('watch_time', wagtail.blocks.IntegerBlock(help_text='Estimated time to watch/read the content.', label='Watch Time (minutes)', required=True)), ('proficiency_level', wagtail.blocks.ChoiceBlock(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], help_text='Select the difficulty level.', label='Proficiency Level')), ('thumbnail', wagtail.images.blocks.ImageChooserBlock(help_text='Choose a thumbnail image for the video.', label='Thumbnail Image')), ('link_label', wagtail.blocks.CharBlock(help_text='The text for the link button.', label='Link Label', max_length=50, required=False))]), help_text='Add multiple video cards to this section', label='Add text card')), ('description', wagtail.blocks.RichTextBlock(editor='default', help_text='Add additional text', required=False)), ('posted_date', wagtail.blocks.CharBlock(help_text='Posted date', required=True))]))])),
                ('banner_header_image', models.ForeignKey(blank=True, help_text='Banner image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Podcast Page',
                'verbose_name_plural': 'Podcast Pages',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='PodcastPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='podcast.podcastpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='podcastpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='podcast.PodcastPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
